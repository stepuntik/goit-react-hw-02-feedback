{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/SectionTitle/SectionTitle.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","style","listStyle","paddingLeft","FeedbackOptions","options","onLeaveFeedback","map","option","name","onClick","SectionTitle","title","children","Notification","message","App","state","updateStatistics","e","preventDefault","setState","target","countTotalFeedback","countPositiveFeedbackPercentage","this","Component","ReactDOM","render","document","getElementById"],"mappings":"yNAuBeA,EApBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,mCACE,qBAAIC,MAAO,CAAEC,UAAW,OAAQC,YAAa,GAA7C,UACE,wCAAWP,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,aCQSI,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAAqBC,KAAMD,EAAQE,QAASJ,EAA5C,SACGE,GADUA,SCSJG,EAZM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACnB,qCACE,6BAAKD,IACJC,MCOUC,EAVM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,mCACE,4BAAIA,OCCaC,E,4MACnBC,MAAQ,CACNrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPoB,iBAAmB,SAAAC,GACjBA,EAAEC,iBACF,EAAKC,SAAL,eACGF,EAAEG,OAAOb,KAAO,EAAKQ,MAAME,EAAEG,OAAOb,MAAQ,K,EAIjDc,mBAAqB,SAAC3B,EAAMC,EAASC,GACnC,OAAOF,EAAOC,EAAUC,G,EAG1B0B,gCAAkC,SAAC5B,EAAMC,EAASC,GAChD,OAAIF,EAAOC,EAAUC,IAAQ,EAAU,EAE/BF,GAAQA,EAAOC,EAAUC,GAAQ,K,4CAG3C,WACE,MAA+B2B,KAAKR,MAA5BrB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,iCACE,cAAC,EAAD,CAAcc,MAAM,wBAApB,SACE,cAAC,EAAD,CACEP,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBmB,KAAKP,qBAI1B,cAAC,EAAD,CAAcN,MAAM,aAApB,SACGhB,EAAOC,EAAUC,IAAQ,EACxB,cAAC,EAAD,CAAciB,QAAQ,sBAEtB,cAAC,EAAD,CACEnB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO0B,KAAKF,mBAAmB3B,EAAMC,EAASC,GAC9CE,mBAAoByB,KAAKD,gCACvB5B,EACAC,EACAC,c,GAhDiB4B,aCFjCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.56fd0b99.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    <ul style={{ listStyle: 'none', paddingLeft: 0 }}>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  </>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    {options.map(option => (\r\n      <button key={option} name={option} onClick={onLeaveFeedback}>\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SectionTitle = ({ title, children }) => (\r\n  <>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </>\r\n);\r\n\r\nSectionTitle.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default SectionTitle;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n  <>\r\n    <p>{message}</p>\r\n  </>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\nimport Statistics from './Statistics/Statistics';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport SectionTitle from './SectionTitle/SectionTitle';\nimport Notification from './Notification/Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  updateStatistics = e => {\n    e.preventDefault();\n    this.setState({\n      [e.target.name]: this.state[e.target.name] + 1,\n    });\n  };\n\n  countTotalFeedback = (good, neutral, bad) => {\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = (good, neutral, bad) => {\n    if (good + neutral + bad === 0) return 0;\n\n    return (good / (good + neutral + bad)) * 100;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <form>\n        <SectionTitle title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.updateStatistics}\n          />\n        </SectionTitle>\n\n        <SectionTitle title=\"Statistics\">\n          {good + neutral + bad === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback(good, neutral, bad)}\n              positivePercentage={this.countPositiveFeedbackPercentage(\n                good,\n                neutral,\n                bad\n              )}\n            />\n          )}\n        </SectionTitle>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}